% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dssCoxph.R
\name{dssCoxph}
\alias{dssCoxph}
\title{Remote coxph + (optional) survfit.coxph}
\usage{
dssCoxph(..., async = TRUE, wait = TRUE, datasources = NULL)
}
\arguments{
\item{...}{arguments to be sent to the 2 functions.
Note, the data argument must be a character, the name of the input dataframe.
If a newdata dataframe is present in the arguments, survfit will be called on the coxph object.
The newdata dataframe argument must be sent as text describing the arguments to a call to data.frame() (see example).}

\item{async}{same as in datashield.assign}

\item{wait}{same as in datashield.assign}

\item{datasources}{same as in datashield.assign}
}
\value{
A list containing the stripped down coxph model (without the call and the residuals)
}
\description{
Executes coxph \{survival\} and survfit \{survival\} on the remote nodes
}
\examples{
# we work on dcs only
# create a time to insulin dataframe:
ds2.time.to.insulin('tti', 'cm', 'lb', 'mh', trt.date.col = 'CMSTDTC', async = FALSE, datasources = opals['dcs'])
#prepare the other dataframes;
ds2.subset('dm2', 'dm', row.filter = "VISIT == 'VISIT 1'", col.filter = "c('SUBJID', 'SEX', 'AGE')", datasources = opals['dcs'])
ds2.subset('vs2', 'vs', row.filter = 'VISIT == "VISIT 1" & VSTESTCD \%in\% c("BMI", "HEIGHT", "WEIGHT")', col.filter = 'c("SUBJID", "VSTESTCD",  "VSORRES")', datasources = opals['dcs'])
ds2.pivot('vs2', 'vs2', value.var = 'VSORRES', formula = 'SUBJID ~ VSTESTCD', completeCases = TRUE,   async = FALSE, datasources = opals['dcs'])
#join everything:
ds2.join(c('tti', 'vs2', 'dm2'), 'coxph_input', join.type = 'inner', async = FALSE, datasources = opals['dcs'])
#create the new.dataframe argument (note the reference to coxph_input created in the previous step)
new.df <- 'SEX = c("M", "F"), AGE = rep(mean(coxph_input$AGE),2), VSTESTCD.HEIGHT_vs2 = rep(mean(coxph_input$VSTESTCD.HEIGHT_vs2),2),
VSTESTCD.WEIGHT_vs2 = rep(mean(coxph_input$VSTESTCD.WEIGHT_vs2),2)'

# execute the function:
cox.res <- ds2.coxph(formula = survival::Surv(DAYS_TO_INSULIN) ~ SEX + AGE  +  VSTESTCD.HEIGHT_vs2 + VSTESTCD.WEIGHT_vs2, data = 'coxph_input', new.dataframe = new.df, async = FALSE, datasources = opals['dcs'])

plot the fit:
sapply(names(cox.res), function(x) print(ggsurvplot(cox.res[[x]]$fit, conf.int = TRUE, legend.labs=c("Sex=M", "Sex=F"), theme = theme_classic())))

}
